// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TCC.Repository;

namespace TCC.Repository.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<int>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("TCC.Domain.Identity.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("TCC.Domain.Identity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<bool>("Adm");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("TCC.Domain.Identity.UserRole", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("TCC.Domain.consultas.Consulta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DataNascimento");

                    b.Property<string>("HashLib");

                    b.Property<string>("InicioSintomas");

                    b.Property<string>("NomePaciente");

                    b.Property<int?>("QtdMaxExame");

                    b.Property<int?>("QtdMaxPergunta");

                    b.Property<string>("QueixaPrincipal");

                    b.Property<string>("Sexo");

                    b.Property<string>("TipoAtendimento");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.ToTable("Consultas");
                });

            modelBuilder.Entity("TCC.Domain.consultas.Exame", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Certa");

                    b.Property<int>("ConsultaId");

                    b.Property<string>("ImgExame");

                    b.Property<string>("Nome");

                    b.HasKey("Id");

                    b.HasIndex("ConsultaId");

                    b.ToTable("Exames");
                });

            modelBuilder.Entity("TCC.Domain.consultas.PerguntaResposta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Certa");

                    b.Property<int>("ConsultaId");

                    b.Property<string>("Pergunta");

                    b.Property<string>("Resposta");

                    b.HasKey("Id");

                    b.HasIndex("ConsultaId");

                    b.ToTable("PerguntaRespostas");
                });

            modelBuilder.Entity("TCC.Domain.resultados.ExameResultado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Certa");

                    b.Property<string>("ImgExame");

                    b.Property<string>("Nome");

                    b.Property<int>("ResultadoId");

                    b.Property<bool>("Selecionada");

                    b.HasKey("Id");

                    b.HasIndex("ResultadoId");

                    b.ToTable("ExameResultado");
                });

            modelBuilder.Entity("TCC.Domain.resultados.PerguntaRespostaResultado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Certa");

                    b.Property<string>("Pergunta");

                    b.Property<string>("Resposta");

                    b.Property<int>("ResultadoId");

                    b.Property<bool>("Selecionada");

                    b.HasKey("Id");

                    b.HasIndex("ResultadoId");

                    b.ToTable("PerguntaRespostaResultado");
                });

            modelBuilder.Entity("TCC.Domain.resultados.Resultado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AlunoId");

                    b.Property<DateTime>("DataHora");

                    b.Property<DateTime>("DataNascimento");

                    b.Property<bool>("Finalizado");

                    b.Property<string>("HashLib");

                    b.Property<string>("InicioSintomas");

                    b.Property<string>("NomeAluno");

                    b.Property<string>("NomePaciente");

                    b.Property<string>("NomeProfessor");

                    b.Property<decimal>("PercAcertExame");

                    b.Property<decimal>("PercAcertPergunta");

                    b.Property<int>("ProfessorId");

                    b.Property<int?>("QtdMaxExame");

                    b.Property<int?>("QtdMaxPergunta");

                    b.Property<string>("QueixaPrincipal");

                    b.Property<string>("Sexo");

                    b.Property<string>("TipoAtendimento");

                    b.HasKey("Id");

                    b.ToTable("Resultados");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("TCC.Domain.Identity.Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("TCC.Domain.Identity.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("TCC.Domain.Identity.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("TCC.Domain.Identity.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TCC.Domain.Identity.UserRole", b =>
                {
                    b.HasOne("TCC.Domain.Identity.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TCC.Domain.Identity.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TCC.Domain.consultas.Exame", b =>
                {
                    b.HasOne("TCC.Domain.consultas.Consulta")
                        .WithMany("Exames")
                        .HasForeignKey("ConsultaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TCC.Domain.consultas.PerguntaResposta", b =>
                {
                    b.HasOne("TCC.Domain.consultas.Consulta")
                        .WithMany("PerguntaRespostas")
                        .HasForeignKey("ConsultaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TCC.Domain.resultados.ExameResultado", b =>
                {
                    b.HasOne("TCC.Domain.resultados.Resultado")
                        .WithMany("ExameResultados")
                        .HasForeignKey("ResultadoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TCC.Domain.resultados.PerguntaRespostaResultado", b =>
                {
                    b.HasOne("TCC.Domain.resultados.Resultado")
                        .WithMany("PerguntaRespostasResultados")
                        .HasForeignKey("ResultadoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
